?fread
library(data.table)
dataset1 <- fread(paste(fileloc, "FGDP.csv"), header=F, skip=5)
?fread
dataset1 <- fread(paste(fileloc, "FGDP.csv"), header=F, skip=5, select(c(1,2,4,5)), col.names = c("CCode","CID","Economy","USD"))
dataset1 <- fread(paste(fileloc, "FGDP.csv"), header=F, skip=5, select = c(1,2,4,5), col.names = c("CCode","CID","Economy","USD"))
View(dataset1)
dataset2 <- fread(paste(fileloc, "FEDSTATS_Country.csv"))
View(dataset2)
?merge
dataset1 <- fread(paste(fileloc, "FGDP.csv"), header=F, skip=5, select = c(1,2,4,5), col.names = c("CountryCode","CID","Economy","USD"))
dataset2 <- fread(paste(fileloc, "FEDSTATS_Country.csv"))
dataset <- merge(dataset1, dataset2, by = "CountryCode")
nrows(dataset)
nrow(dataset)
View(dataset)
dataset <- merge(dataset2, dataset1, by = "CountryCode")
nrow(dataset)
View(dataset1)
dataset1 <- fread(paste(fileloc, "FGDP.csv"), header=F, skip=5, select = c(1,2,4,5), col.names = c("CountryCode","CID","Economy","USD"), nrow=190)
dataset2 <- fread(paste(fileloc, "FEDSTATS_Country.csv"))
dataset <- merge(dataset1, dataset2, by = "CountryCode")
nrow(dataset)
?order
View(dataset)
setorderv(dataset, cols = CID)
setorderv(dataset, cols = "CID", order=1)
x <- setorderv(dataset, cols = "CID", order=1)
View(x)
x <- setorderv(dataset, cols = "CID", order=-1)
View(x)
dataset <- setorderv(dataset, cols = "CID", order=-1)
dataset[13]
dataset$CountryCode[13]
dataset$Economy[13]
View(dataset)
table(dataset$`Income Group`)
View(dataset)
dataset[, lapply(mean), by = .(Income Group)]
dataset[, lapply(mean), by = .(Income group)]
dataset[, lapply(mean), by = "Income group"]
View(dataset)
dataset[, lapply(mean), by = "Income Group"]
dataset(sapply(mean))
View(dataset)
dataset[`Income Group` == "High income: OECD"
, lapply(mean)
, .SDcols = c("CID")
, by = "Income Group"]
dataset[`Income Group` == "High income: OECD"
, lapply(.mean)
, .SDcols = c("CID")
, by = "Income Group"]
dataset[`Income Group` == "High income: OECD"
, lapply(.SD, mean)
, .SDcols = c("CID")
, by = "Income Group"]
dataset[`Income Group` == "High income: nonOECD"
, lapply(.SD, mean)
, .SDcols = c("CID")
, by = "Income Group"]
breaks <- quantile(dataset[, Rank], probs = seq(0, 1, 0.2), na.rm = TRUE)
breaks <- quantile(dataset[, CID], probs = seq(0, 1, 0.2), na.rm = TRUE)
breaks
dataset$qGDP <- cut(dataset[, CID], breaks = breaks)
dataset[`Income Group` == "Lower middle income", .N, by = c("Income Group", "qGDP")]
swirl()
librry(swirl)
library(swirl)
swirl()
mydf <- read.csv(path2csv = F, stringsAsFactors = F)
mydf <- read.csv(path2csv, stringsAsFactors = F)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim()
dim(mydf)
head(mydf)
library(dplyr)
packageVersion(dplyr)
packageVersion("dplyr")
cran <. tbl_df(mydf)
cran <- tbl_df(mydf)
rm(mydf)
rm("mydf")
cran
?select
View(cran)
select(cran, ipd_id, package, country)
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -5:20)
select(cran, -5:20)
-5:20
(-5:20)
-(5:20)
select(cran, -(5:20))
select(cran, -(x:size))
select(cran, -(x:size))
info()
mxt()
nxt()
View(cran)
select(cran, -(X:size))
filter(cran, package =="swirl")
filter(cran, r_version == "3.1.1.", country = "US")
filter(cran, r_version == "3.1.1.", country == "US")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version == "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "uS" | country == "IN")
filter(cran, country == "uS" | country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(3,5,NA, 10)
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, r_version == !is.na())
filter(cran, !is.na(r_version))
cran2 <- selet(cran, size:ip_id)
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size/ 2^20)
mutate(cran3, size_mb = size/ 2^20, size_gb = size/ 2^10)
mutate(cran3, size_mb = size/ 2^20, size_gb = size_mb/ 2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran3, avg_bytes = mean(size))
summarize(cran3, avg_bytes = mean(size))
summarize(cran, avg_bytes = mean(size))
swirl()
library(swirl)
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran)
by_package <- group_by(cran, package)
by_package
summarise(apply mean(size))
?
fdf
summarise(apply(mean(size)))
summarise(by_package, mean(size))
submit()
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
?n
?n_distinct
submit()
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
pack_sum
submit()
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrang(top_counts, desc(count))
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
view(top_unique)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
?chain
??chain
submit()
View(result3)
submit()
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb <- size /2^20)
submit()
submit()
submit()
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb = size / 2^20) %>%
# Your call to filter() goes here
filter(size_mb <= 0.5)
print()
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb = size / 2^20) %>%
# Your call to filter() goes here
filter(size_mb <= 0.5)
print
submit()
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb = size / 2^20) %>%
# Your call to filter() goes here
filter(size_mb <= 0.5) %>%
print
submit()
submit()
# arrange() the result by size_mb, in descending order.
#
# If you want your results printed to the console, add
# print to the end of your chain.
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb = size / 2^20) %>%
filter(size_mb <= 0.5) %>%
# Your call to arrange() goes here
arrange(desc(size_mb)) %>%
print
submit()
0
library(swirl)
swirl()
Sys.getlocale()
Sys.getlocale("LC_TIME")
library(lubridale)
library(lubridate)
help(package = "lubridate")
help(package = lubridate)
today()
this_day <- today()
this_Day
this_day
year(this_day)
wday(this_day)
wday(this_day, label=T)
wday(this_day, label=TRUE)
row(this_day)
now(this_day)
this_moment <- now(this_day)
this_moment <- now()
this_moment
minute(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
ymd("MArch 12, 1975")
mdy("MArch 12, 1975")
mdy("March 12, 1975")
dmy(15081985)
dmy(25081985)
dmy("192012")
ymd("192012")
ymd("--192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
update(this_moment, now())
update(this_moment, hourse = 1, minutes = 15)
update(this_moment, hourse = 10, minutes = 16)
update(this_moment, hourse = 10, minutes = 16, seconds = 0)
update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment <- update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
nyc <- now("America/New_york")
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34, seconds = 0)
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz()
?with_tz()
?with_tz
arrive <- with_tz(tzone="Asia/Hong_Kong")
arrive <- with_tz(arrive, tzone="Asia/Hong_Kong")
arrive
last_time <- mdy(June 17, 2008, tz = "Singapore")
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?interval()
?interval
how_long <. last_time %--% arrive
how_long <- last_time %--% arrive
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
install_course("Exploratory Data Analysis")
swirl()
library(swirl)
swirl()
head(pollution)
dim(polltuion)
dim(pollution)
summary(pollution$pm25)
quantile(pollution$pm25, ppm= INPLACE)
quantile(ppm)
boxplot(ppm)
boxplot(ppm, col="blue")
abline(h=!2)
abline(h=12)
hist(ppm, col="green")
rug(ppm)
rug(ppm, low)
rug(low)
low
high
hist(ppm, col="green", equal = 100)
hist(ppm, col="green", breaks = 100)
rug(ppm)
hist(ppm, col="green")
abline(v=12, lwd=2)
abline(v=median(ppm), col="magenta), lwd=4)
)
abline(v=median(ppm), col="magenta", lwd=4)
names(pollution)
table(pollution$region)
reg <- table(pollution$region)
reg
barplot(reg, col="wheat", main="Number of Counties in Each Region")
boxplot(y ~ x, date=pollution, col="red")
boxplot(pm25 ~ region, date=pollution, col="red")
boxplot(pm25 ~ region, date="pollution", col="red")
boxplot(pm25 ~ region, data=pollution, col="red")
pa(mfrow=c(2,1), mar=c(4,4,2,1))
par(mfrow=c(2,1), mar=c(4,4,2,1))
east <- subset(pollution, region!="east")
east <- subset(pollution, region=="east")
head(east)
hist(pm25, col="green")
hist(pm25[east], col="green")
hist(east$pm25, col="green")
subset(!east, col="green")
hist(pm25[west], col="green")
subset(!west, col="green")
west <- subset(pollution, region!="east")
hist(subset(pollution, region!="east"))
hist(subset(pollution, region!="east"))$pm25, col = "green")
hist(subset(pollution, region!="east")$pm25, col = "green")
hist(subset(pollution, region=="west")$pm25, col = "green")
play()
hist(subset(pollution, region=="west")$pm25, col = "green")
hist(subset(pollution, region!="east")$pm25, col = "green")
next()
nxt()
hist(subset(pollution, region!="east")$pm25, col = "green")
with(pollution, plot(latitude, pm25))
abline(h = 12, kwd=2, kty=2)
abline(h = 12, kwd=2, lty=2)
abline(h = 12, lwd=2, lty=2)
plot(pollution$latitude, pollution$pm25, col=pollution$region)
plot(pollution$latitude, ppm, col=pollution$region)
abline(h=!2, lwd=2, lty=2)
abline(h=12, lwd=2, lty=2)
par(mfrow=c(1,2), mar=c(5,4,2,1))
west <- subset(pollution, region="TRUE")
west <- subset(pollution, region=="west")
plot(wets$latitude, west$pm25, main="west")
plot(west$latitude, west$pm25, main="west")
plot(west$latitude, west$pm25, main = "west")
plot(west$latitude, west$pm25, main = "West")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "East")
library(swirl)
swirl()
?Devices
windows(dataset, plot(eruptions, waiting))
windows(dataset, plot(eruptions, waiting))
dd
gerreg
plot(eruptions, waiting)
plot(eruptions, waiting)
library(swirl)
swirl()
dataset
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
title(main = "Old Faithful Geyser data")
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, file="geyserplot.png")
dev.off()
sessionInfo()
# estimate memory usage
print(paste(round(2075259 * 9 * 8 / 1000000, 1), "MB"))
print(object.size(df), units = "auto", standard = "SI")
print(object.size(df), units = "auto", standard = "IEC")
# Upload, unzip and prepare dataset
setwd("./Development/R/Exploratory Data Analysis")
con <- 'https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip'
download.file(con, "power_consumption.zip")
unzip("power_consumption.zip")
df <- read.csv2("household_power_consumption.txt", sep=";", stringsAsFactors=FALSE)
if (file.exists("power_consumption.zip")) file.remove("power_consumption.zip")
if (file.exists("household_power_consumption.txt")) file.remove("household_power_consumption.txt")
# Prepare data (subset and set numeric variables)
Sys.setlocale("LC_TIME", "English") # Set local time to English for current session
df <- df[df$Date %in% c("1/2/2007","2/2/2007") ,]
df$DTime <- strptime(paste(df$Date, df$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
for (i in 3:9) {
df[,i] <- as.numeric(df[,i]) # Set all other variables as numeric
}
# Plot 1
png("plot1.png", width=480, height=480)
hist(df$Global_active_power, col="red", main="Global Active Power", xlab="Global Active Power (kilowatts)")
dev.off()
# Plot 1
png("plot1.png", width=480, height=480)
plot(df$DTime, df$Global_active_power, type='l', ylab="Global Active Power (kilowatts)", xlab="")
dev.off()
png("plot1.png", width=480, height=480)
hist(df$Global_active_power, col="red", main="Global Active Power", xlab="Global Active Power (kilowatts)")
dev.off()
# Plot 1
png("plot2.png", width=480, height=480)
plot(df$DTime, df$Global_active_power, type='l', ylab="Global Active Power (kilowatts)", xlab="")
dev.off()
# Plot 3
png("plot3.png", width=480, height=480)
plot(df$Date, df$Sub_metering_1, type="l", xlab="", ylab="Energy sub metering")
lines(df$Date, df$Sub_metering_2, type="l", col="red")
lines(df$Date, df$Sub_metering_3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=1, lwd=2.5, col=c("black", "red", "blue"))
dev.off()
# Plot 3
png("plot3.png", width=480, height=480)
plot(df$Date, df$Sub_metering_1, type="l", xlab="", ylab="Energy sub metering")
lines(df$Date, df$Sub_metering_2, type="l", col="red")
lines(df$Date, df$Sub_metering_3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=1, lwd=2.5, col=c("black", "red", "blue"))
dev.off()
plot(df$Date, df$Sub_metering_1, type="l", xlab="", ylab="Energy sub metering")
# estimate memory usage
print(paste(round(2075259 * 9 * 8 / 1000000, 1), "MB"))
print(object.size(df), units = "auto", standard = "SI")
print(object.size(df), units = "auto", standard = "IEC")
# Upload, unzip and prepare dataset
setwd("./Development/R/Exploratory Data Analysis")
con <- 'https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip'
download.file(con, "power_consumption.zip")
unzip("power_consumption.zip")
df <- read.csv2("household_power_consumption.txt", sep=";", stringsAsFactors=FALSE)
if (file.exists("power_consumption.zip")) file.remove("power_consumption.zip")
if (file.exists("household_power_consumption.txt")) file.remove("household_power_consumption.txt")
# Prepare data (subset and set numeric variables)
Sys.setlocale("LC_TIME", "English") # Set local time to English for current session
df <- df[df$Date %in% c("1/2/2007","2/2/2007") ,]
df$DTime <- strptime(paste(df$Date, df$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
for (i in 3:9) {
df[,i] <- as.numeric(df[,i]) # Set all other variables as numeric
}
# Plot 1
png("plot1.png", width=480, height=480)
hist(df$Global_active_power, col="red", main="Global Active Power", xlab="Global Active Power (kilowatts)")
dev.off()
# Plot 1
png("plot2.png", width=480, height=480)
plot(df$DTime, df$Global_active_power, type='l', ylab="Global Active Power (kilowatts)", xlab="")
dev.off()
# Plot 3
png("plot3.png", width=480, height=480)
plot(df$Date, df$Sub_metering_1, type="l", xlab="", ylab="Energy sub metering")
lines(df$Date, df$Sub_metering_2, type="l", col="red")
lines(df$Date, df$Sub_metering_3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=1, lwd=2.5, col=c("black", "red", "blue"))
dev.off()
# Plot 3
png("plot3.png", width=480, height=480)
plot(df$DTime, df$Sub_metering_1, type="l", xlab="", ylab="Energy sub metering")
lines(df$DTime, df$Sub_metering_2, type="l", col="red")
lines(df$DTime, df$Sub_metering_3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=1, lwd=2.5, col=c("black", "red", "blue"))
dev.off()
# Plot 4
png("plot4.png", width=480, height=480)
par(mfrow = c(2,2))
plot(df$DTime, df$Global_active_power, type='l', ylab="Global Active Power", xlab="")
plot(df$DTime, df$Voltage, type='l', ylab="Voltage", xlab="datetime")
plot(df$DTime, df$Sub_metering_1, type="l", ylab="Energy sub metering", xlab="")
lines(df$DTime, df$Sub_metering_2, type="l", col="red")
lines(df$DTimee, df$Sub_metering_3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=1, lwd=2.5, col=c("black", "red", "blue"), cex = 0.75)
plot(df$DTime, df$Global_reactive_power, type='l', ylab="Global reactive power", xlab="datetime")
dev.off()
